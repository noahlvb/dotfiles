#!/usr/bin/env bash
# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Checks if your online
function online() {
	wget -q --tries=10 --timeout=20 --spider http://google.com
	if [[ $? -eq 0 ]]; then
		echo "Online!!"
	else
		echo "Offline!!"
	fi
}

# Extract varius compressed packages
extract() {
  	if [ -f "$1" ]; then
    	case "$1" in
			*.tar.bz2)  tar -jxvf "$1"                        ;;
			*.tar.gz)   tar -zxvf "$1"                        ;;
			*.bz2)      bunzip2 "$1"                          ;;
			*.dmg)      hdiutil mount "$1"                    ;;
			*.gz)       gunzip "$1"                           ;;
			*.tar)      tar -xvf "$1"                         ;;
			*.tbz2)     tar -jxvf "$1"                        ;;
			*.tgz)      tar -zxvf "$1"                        ;;
			*.zip)      unzip "$1"                            ;;
			*.ZIP)      unzip "$1"                            ;;
			*.pax)      cat "$1" | pax -r                     ;;
			*.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
			*.Z)        uncompress "$1"                       ;;
			*) echo "'$1' cannot be extracted/mounted via extract()" ;;
    	esac
  	else
     	echo "'$1' is not a valid file to extract"
  	fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
